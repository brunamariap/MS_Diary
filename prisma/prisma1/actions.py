# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class GradeActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Grade]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Grade.prisma().query_raw(
            'SELECT * FROM Grade WHERE id = ?',
            'bbadfchfja',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Grade
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Grade.prisma().query_first(
            'SELECT * FROM Grade WHERE score = ?',
            377401575,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.GradeCreateInput,
        include: Optional[types.GradeInclude] = None
    ) -> _PrismaModelT:
        """Create a new Grade record.

        Parameters
        ----------
        data
            Grade record data
        include
            Specifies which relations should be loaded on the returned Grade model

        Returns
        -------
        prisma.models.Grade
            The created Grade record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Grade record from just the required fields
        grade = Grade.prisma().create(
            data={
                # data to create a Grade record
                'score': 662824084,
                'bimester': 1147902781,
                'disciplineId': 'cadfabfehe',
                'attributedBy': 'dgiiaaijj',
                'studentId': 'bfaiacjjfc',
                'diaryId': 'eigcfgbif',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.GradeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Grade records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Grade record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Grade.prisma().create_many(
            data=[
                {
                    # data to create a Grade record
                    'score': 1062517886,
                    'bimester': 267834847,
                    'disciplineId': 'biabhbdai',
                    'attributedBy': 'idghgaicb',
                    'studentId': 'fjfddhigg',
                    'diaryId': 'hjaecfifb',
                },
                {
                    # data to create a Grade record
                    'score': 2111915288,
                    'bimester': 1149758321,
                    'disciplineId': 'bgeecijdgg',
                    'attributedBy': 'bdiicjafbj',
                    'studentId': 'bgehebiafc',
                    'diaryId': 'bghffegacj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.GradeWhereUniqueInput,
        include: Optional[types.GradeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Grade record.

        Parameters
        ----------
        where
            Grade filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Grade model

        Returns
        -------
        prisma.models.Grade
            The deleted Grade record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        grade = Grade.prisma().delete(
            where={
                'id': 'bhghchehcc',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.GradeWhereUniqueInput,
        include: Optional[types.GradeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Grade record.

        Parameters
        ----------
        where
            Grade filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Grade model

        Returns
        -------
        prisma.models.Grade
            The found Grade record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        grade = Grade.prisma().find_unique(
            where={
                'id': 'dcgchcbbf',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.GradeWhereUniqueInput,
        include: Optional[types.GradeInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Grade record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Grade filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Grade model

        Returns
        -------
        prisma.models.Grade
            The found Grade record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        grade = Grade.prisma().find_unique_or_raise(
            where={
                'id': 'bdedcabahc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GradeWhereInput] = None,
        cursor: Optional[types.GradeWhereUniqueInput] = None,
        include: Optional[types.GradeInclude] = None,
        order: Optional[Union[types.GradeOrderByInput, List[types.GradeOrderByInput]]] = None,
        distinct: Optional[List[types.GradeScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Grade records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Grade records returned
        skip
            Ignore the first N results
        where
            Grade filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Grade model
        order
            Order the returned Grade records by any field
        distinct
            Filter Grade records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Grade]
            The list of all Grade records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Grade records
        grades = Grade.prisma().find_many(take=10)

        # find the first 5 Grade records ordered by the bimester field
        grades = Grade.prisma().find_many(
            take=5,
            order={
                'bimester': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GradeWhereInput] = None,
        cursor: Optional[types.GradeWhereUniqueInput] = None,
        include: Optional[types.GradeInclude] = None,
        order: Optional[Union[types.GradeOrderByInput, List[types.GradeOrderByInput]]] = None,
        distinct: Optional[List[types.GradeScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Grade record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Grade filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Grade model
        order
            Order the returned Grade records by any field
        distinct
            Filter Grade records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Grade
            The first Grade record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Grade record ordered by the disciplineId field
        grade = Grade.prisma().find_first(
            skip=1,
            order={
                'disciplineId': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GradeWhereInput] = None,
        cursor: Optional[types.GradeWhereUniqueInput] = None,
        include: Optional[types.GradeInclude] = None,
        order: Optional[Union[types.GradeOrderByInput, List[types.GradeOrderByInput]]] = None,
        distinct: Optional[List[types.GradeScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Grade record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Grade filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Grade model
        order
            Order the returned Grade records by any field
        distinct
            Filter Grade records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Grade
            The first Grade record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Grade record ordered by the attributedBy field
        grade = Grade.prisma().find_first_or_raise(
            skip=1,
            order={
                'attributedBy': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.GradeUpdateInput,
        where: types.GradeWhereUniqueInput,
        include: Optional[types.GradeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Grade record.

        Parameters
        ----------
        data
            Grade record data specifying what to update
        where
            Grade filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Grade model

        Returns
        -------
        prisma.models.Grade
            The updated Grade record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        grade = Grade.prisma().update(
            where={
                'id': 'ghfhiafcb',
            },
            data={
                # data to update the Grade record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.GradeWhereUniqueInput,
        data: types.GradeUpsertInput,
        include: Optional[types.GradeInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Grade filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Grade model

        Returns
        -------
        prisma.models.Grade
            The created or updated Grade record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        grade = Grade.prisma().upsert(
            where={
                'id': 'heejgedji',
            },
            data={
                'create': {
                    'id': 'heejgedji',
                    'score': 2111915288,
                    'bimester': 1149758321,
                    'disciplineId': 'bgeecijdgg',
                    'attributedBy': 'bdiicjafbj',
                    'studentId': 'bgehebiafc',
                    'diaryId': 'bghffegacj',
                },
                'update': {
                    'score': 2111915288,
                    'bimester': 1149758321,
                    'disciplineId': 'bgeecijdgg',
                    'attributedBy': 'bdiicjafbj',
                    'studentId': 'bgehebiafc',
                    'diaryId': 'bghffegacj',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.GradeUpdateManyMutationInput,
        where: types.GradeWhereInput,
    ) -> int:
        """Update multiple Grade records

        Parameters
        ----------
        data
            Grade data to update the selected Grade records to
        where
            Filter to select the Grade records to update

        Returns
        -------
        int
            The total number of Grade records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Grade records
        total = Grade.prisma().update_many(
            data={
                'studentId': 'bjgjgibgbf'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GradeWhereInput] = None,
        cursor: Optional[types.GradeWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Grade records present in the database

        Parameters
        ----------
        select
            Select the Grade fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Grade filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GradeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Grade.prisma().count()

        # results: prisma.types.GradeCountAggregateOutput
        results = Grade.prisma().count(
            select={
                '_all': True,
                'diaryId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.GradeCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GradeWhereInput] = None,
        cursor: Optional[types.GradeWhereUniqueInput] = None,
    ) -> types.GradeCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.GradeCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GradeWhereInput] = None,
        cursor: Optional[types.GradeWhereUniqueInput] = None,
    ) -> Union[int, types.GradeCountAggregateOutput]:
        """Count the number of Grade records present in the database

        Parameters
        ----------
        select
            Select the Grade fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Grade filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GradeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Grade.prisma().count()

        # results: prisma.types.GradeCountAggregateOutput
        results = Grade.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GradeCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.GradeWhereInput] = None
    ) -> int:
        """Delete multiple Grade records.

        Parameters
        ----------
        where
            Optional Grade filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Grade records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Grade records
        total = Grade.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.GradeScalarFieldKeys'],
        *,
        where: Optional['types.GradeWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GradeAvgAggregateInput'] = None,
        sum: Optional['types.GradeSumAggregateInput'] = None,
        min: Optional['types.GradeMinAggregateInput'] = None,
        max: Optional['types.GradeMaxAggregateInput'] = None,
        having: Optional['types.GradeScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GradeCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GradeScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GradeScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GradeGroupByOutput']:
        """Group Grade records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Grade fields to group records by
        where
            Grade filter to select records
        take
            Limit the maximum number of Grade records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GradeGroupByOutput]
            A list of dictionaries representing the Grade record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Grade records by score values
        # and count how many records are in each group
        results = Grade.prisma().group_by(
            ['score'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DiaryActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Diary]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Diary.prisma().query_raw(
            'SELECT * FROM Diary WHERE id = ?',
            'bbbgbhfjge',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Diary
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Diary.prisma().query_first(
            'SELECT * FROM Diary WHERE referencePeriod = ?',
            861472101,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.DiaryCreateInput,
        include: Optional[types.DiaryInclude] = None
    ) -> _PrismaModelT:
        """Create a new Diary record.

        Parameters
        ----------
        data
            Diary record data
        include
            Specifies which relations should be loaded on the returned Diary model

        Returns
        -------
        prisma.models.Diary
            The created Diary record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Diary record from just the required fields
        diary = Diary.prisma().create(
            data={
                # data to create a Diary record
                'referencePeriod': 1303003706,
                'referenceYear': 1686638315,
                'startDate': datetime.datetime.utcnow(),
                'endDate': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.DiaryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Diary records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Diary record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Diary.prisma().create_many(
            data=[
                {
                    # data to create a Diary record
                    'referencePeriod': 2000430152,
                    'referenceYear': 1868141281,
                    'startDate': datetime.datetime.utcnow(),
                    'endDate': datetime.datetime.utcnow(),
                },
                {
                    # data to create a Diary record
                    'referencePeriod': 1860847622,
                    'referenceYear': 1448521415,
                    'startDate': datetime.datetime.utcnow(),
                    'endDate': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.DiaryWhereUniqueInput,
        include: Optional[types.DiaryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Diary record.

        Parameters
        ----------
        where
            Diary filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Diary model

        Returns
        -------
        prisma.models.Diary
            The deleted Diary record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        diary = Diary.prisma().delete(
            where={
                'id': 'bgcigfahea',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.DiaryWhereUniqueInput,
        include: Optional[types.DiaryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Diary record.

        Parameters
        ----------
        where
            Diary filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Diary model

        Returns
        -------
        prisma.models.Diary
            The found Diary record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        diary = Diary.prisma().find_unique(
            where={
                'id': 'bcejgaggif',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.DiaryWhereUniqueInput,
        include: Optional[types.DiaryInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Diary record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Diary filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Diary model

        Returns
        -------
        prisma.models.Diary
            The found Diary record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        diary = Diary.prisma().find_unique_or_raise(
            where={
                'id': 'idfjadbcc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DiaryWhereInput] = None,
        cursor: Optional[types.DiaryWhereUniqueInput] = None,
        include: Optional[types.DiaryInclude] = None,
        order: Optional[Union[types.DiaryOrderByInput, List[types.DiaryOrderByInput]]] = None,
        distinct: Optional[List[types.DiaryScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Diary records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Diary records returned
        skip
            Ignore the first N results
        where
            Diary filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Diary model
        order
            Order the returned Diary records by any field
        distinct
            Filter Diary records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Diary]
            The list of all Diary records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Diary records
        diarys = Diary.prisma().find_many(take=10)

        # find the first 5 Diary records ordered by the referenceYear field
        diarys = Diary.prisma().find_many(
            take=5,
            order={
                'referenceYear': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DiaryWhereInput] = None,
        cursor: Optional[types.DiaryWhereUniqueInput] = None,
        include: Optional[types.DiaryInclude] = None,
        order: Optional[Union[types.DiaryOrderByInput, List[types.DiaryOrderByInput]]] = None,
        distinct: Optional[List[types.DiaryScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Diary record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Diary filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Diary model
        order
            Order the returned Diary records by any field
        distinct
            Filter Diary records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Diary
            The first Diary record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Diary record ordered by the startDate field
        diary = Diary.prisma().find_first(
            skip=1,
            order={
                'startDate': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DiaryWhereInput] = None,
        cursor: Optional[types.DiaryWhereUniqueInput] = None,
        include: Optional[types.DiaryInclude] = None,
        order: Optional[Union[types.DiaryOrderByInput, List[types.DiaryOrderByInput]]] = None,
        distinct: Optional[List[types.DiaryScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Diary record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Diary filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Diary model
        order
            Order the returned Diary records by any field
        distinct
            Filter Diary records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Diary
            The first Diary record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Diary record ordered by the endDate field
        diary = Diary.prisma().find_first_or_raise(
            skip=1,
            order={
                'endDate': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.DiaryUpdateInput,
        where: types.DiaryWhereUniqueInput,
        include: Optional[types.DiaryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Diary record.

        Parameters
        ----------
        data
            Diary record data specifying what to update
        where
            Diary filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Diary model

        Returns
        -------
        prisma.models.Diary
            The updated Diary record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        diary = Diary.prisma().update(
            where={
                'id': 'hgdhbjhhj',
            },
            data={
                # data to update the Diary record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.DiaryWhereUniqueInput,
        data: types.DiaryUpsertInput,
        include: Optional[types.DiaryInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Diary filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Diary model

        Returns
        -------
        prisma.models.Diary
            The created or updated Diary record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        diary = Diary.prisma().upsert(
            where={
                'id': 'ecjjjfbae',
            },
            data={
                'create': {
                    'id': 'ecjjjfbae',
                    'referencePeriod': 1860847622,
                    'referenceYear': 1448521415,
                    'startDate': datetime.datetime.utcnow(),
                    'endDate': datetime.datetime.utcnow(),
                },
                'update': {
                    'referencePeriod': 1860847622,
                    'referenceYear': 1448521415,
                    'startDate': datetime.datetime.utcnow(),
                    'endDate': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.DiaryUpdateManyMutationInput,
        where: types.DiaryWhereInput,
    ) -> int:
        """Update multiple Diary records

        Parameters
        ----------
        data
            Diary data to update the selected Diary records to
        where
            Filter to select the Diary records to update

        Returns
        -------
        int
            The total number of Diary records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Diary records
        total = Diary.prisma().update_many(
            data={
                'id': 'bhhfibbigf'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DiaryWhereInput] = None,
        cursor: Optional[types.DiaryWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Diary records present in the database

        Parameters
        ----------
        select
            Select the Diary fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Diary filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DiaryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Diary.prisma().count()

        # results: prisma.types.DiaryCountAggregateOutput
        results = Diary.prisma().count(
            select={
                '_all': True,
                'referencePeriod': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.DiaryCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DiaryWhereInput] = None,
        cursor: Optional[types.DiaryWhereUniqueInput] = None,
    ) -> types.DiaryCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.DiaryCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DiaryWhereInput] = None,
        cursor: Optional[types.DiaryWhereUniqueInput] = None,
    ) -> Union[int, types.DiaryCountAggregateOutput]:
        """Count the number of Diary records present in the database

        Parameters
        ----------
        select
            Select the Diary fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Diary filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DiaryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Diary.prisma().count()

        # results: prisma.types.DiaryCountAggregateOutput
        results = Diary.prisma().count(
            select={
                '_all': True,
                'referenceYear': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DiaryCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.DiaryWhereInput] = None
    ) -> int:
        """Delete multiple Diary records.

        Parameters
        ----------
        where
            Optional Diary filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Diary records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Diary records
        total = Diary.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.DiaryScalarFieldKeys'],
        *,
        where: Optional['types.DiaryWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DiaryAvgAggregateInput'] = None,
        sum: Optional['types.DiarySumAggregateInput'] = None,
        min: Optional['types.DiaryMinAggregateInput'] = None,
        max: Optional['types.DiaryMaxAggregateInput'] = None,
        having: Optional['types.DiaryScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DiaryCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DiaryScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DiaryScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DiaryGroupByOutput']:
        """Group Diary records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Diary fields to group records by
        where
            Diary filter to select records
        take
            Limit the maximum number of Diary records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DiaryGroupByOutput]
            A list of dictionaries representing the Diary record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Diary records by startDate values
        # and count how many records are in each group
        results = Diary.prisma().group_by(
            ['startDate'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models